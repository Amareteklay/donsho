```{python}
#| label: config
#| tags: [parameters]

# --- Safely handle parameters with type hints and validation ---
from typing import Dict, Any

# Use getattr to avoid NameError if params isn't defined
p: Dict[str, Any] = getattr(globals(), "params", {}) or {}

# Define typed configuration with defaults
DEFAULTS = {
    "outcome_mode": "count",
    "pred_mode": "count",
    "max_lag": 5,
    "add_trend": True,
    "binary_shocks": [],
    "fe_country": False,
    "fe_continent": True,
}

# Merge configs with parent params taking precedence
cfg: Dict[str, Any] = {**DEFAULTS, **p}

# Validate critical parameters
assert cfg["max_lag"] >= 0, "max_lag must be non-negative"
assert cfg["outcome_mode"] in {"count", "rate"}, "Invalid outcome_mode"
```

## Modelling

```{python}
#| label: setup
#| tags: [setup]

import numpy as np
import pandas as pd
from src.data_loader import load_raw_csv
from src.prep import preprocess_counts
from src.features import build_panel, add_lags
from src.utils import (
    prepare_spec, 
    add_binary, 
    add_year_trend, 
    make_formula,
)
from src.models import (
    fit_poisson,
    evaluate_model,
    train_test_split_ts, 
    filter_model_data
)

# --- Data Constants ---
EXCLUDE_COLS = {"Country_name", "Continent", "Year", "Infectious_disease"}
```

```{python}
#| label: data-prep
#| tags: [data-processing]

# --- Load and Prepare Base Data ---
raw_df = load_raw_csv()
clean_df = preprocess_counts(raw_df)
panel = build_panel(clean_df)

# --- Identify Shock Variables ---
shock_vars = [col for col in panel.columns if col not in EXCLUDE_COLS]
valid_binary = [var for var in cfg["binary_shocks"] if var in shock_vars]

if cfg["binary_shocks"] and not valid_binary:
    print("Warning: No valid binary shocks found in dataset")

# --- Track Feature Engineering Steps ---
feature_log = {
    "original_shocks": shock_vars,
    "binary_converted": valid_binary,
    "max_lag_applied": cfg["max_lag"]
}
```

```{python}
#| label: model-spec
#| tags: [feature-engineering]

# --- Construct Model Specification ---
spec, y, X = prepare_spec(
    panel,
    outcome_mode=cfg["outcome_mode"],
    pred_mode="count",
    shock_cols=shock_vars
)

# Apply binary transformation if requested
if valid_binary:
    spec = add_binary(spec, valid_binary)
    X = [f"{col}_bin" if col in valid_binary else col for col in X]

# Add temporal features
if cfg["max_lag"] > 0:
    base_cols = X.copy()                         # freeze original list
    spec = add_lags(spec, cols=base_cols, max_lag=cfg["max_lag"])
    X += [f"{col}_lag{lag}"
          for col in base_cols
          for lag in range(1, cfg["max_lag"] + 1)]

if cfg["add_trend"]:
    spec = add_year_trend(spec)

# --- Construct Regression Formula ---
formula = make_formula(
    y=y,
    X_cols=X,
    year_trend=False,
    fe={
        "Country_name": cfg["fe_country"],
        "Continent": cfg["fe_continent"]
    }
)

# Finalize model-ready data
spec, X = filter_model_data(spec, y, X)
```

```{python}
#| label: model-fitting
#| tags: [model-training]

# --- Temporal Split ---
train_df, test_df = train_test_split_ts(
    spec, 
    date_col="Year",
    test_size=0.2  # Explicit test size
)

# --- Model Training ---
model = fit_poisson(train_df, formula)

# --- Model Evaluation ---
metrics = evaluate_model(
    model=model,
    df=test_df,
    y=y
)
```

```{python}
#| label: results
#| tags: [results]
#| results: asis

from tabulate import tabulate

# --- Performance Metrics ---
print("## Model Performance Metrics\n")
print(tabulate(
    pd.DataFrame(metrics, index=["Value"]).T.round(3),
    headers="keys",
    tablefmt="github",
    showindex=True
))

# --- Coefficient Table ---
print("\n\n## Regression Coefficients\n")
coef_table = (
    pd.DataFrame({
        "Variable": model.params.index,
        "Coef.": model.params.round(3),
        "Std.Err.": model.bse.round(3),
        "p-value": model.pvalues.round(3)
    })
    .sort_values("p-value", ascending=True)
    .reset_index(drop=True)
)

print(tabulate(
    coef_table,
    headers="keys",
    tablefmt="github",
    showindex=False
))
```

```{python}
#| results: asis

# ---------------------------
# Helper Functions
# ---------------------------
def format_pvalue(p):
    """Format p-values with leading zero"""
    if p < 0.001: return "<0.001"
    return f"{p:.3f}".zfill(5)  # Ensures 0.015 instead of .015

def clean_variable_names(name):
    """Improve readability of variable names"""
    replacements = {
        'C(Continent)[T.': '',
        'Lag': ' (Lag ',
        ']': ')',
        '_': ' ',
        'Geophysical': 'Geo. Hazard',
        'Ecological': 'Eco. Stress',
        'Climatic': 'Climate Impact'
    }
    for k, v in replacements.items():
        name = name.replace(k, v)
    return name.title() + " "  # Space for line breaks
```

## Regression Results

\sisetup{
  table-number-alignment = center,
  group-digits = false
}

\begin{tabular}{l
                S[table-format=-1.3]
                S[parse-numbers=false]
                S[parse-numbers=false]}
  \toprule
  & \multicolumn{3}{c}{Coefficient} \\ \cmidrule(lr){2-4}
  Variable & {Estimate} & {(SE)} & {p-value} \\ \midrule
  % Continental Fixed Effects
  Intercept & -1.343*** & (0.234) & <0.001 \\
  Asia      & -0.686*** & (0.150) & <0.001 \\
  Oceania   & -1.235*** & (0.271) & <0.001 \\
  Europe    & -0.631*** & (0.142) & <0.001 \\
  America   & -0.646*** & (0.179) & <0.001 \\ \addlinespace
  % Economic Factors
  Economic (Lag 1) & 0.142   & (0.076) & 0.064 \\
  Economic (Lag 5) & 0.233** & (0.075) & 0.002 \\ \addlinespace
  % Technological Factors
  Technological (Lag 2) & -0.035* & (0.014) & 0.015 \\
  Technological (Lag 5) &  0.020* & (0.010) & 0.040 \\ \bottomrule
\end{tabular}
